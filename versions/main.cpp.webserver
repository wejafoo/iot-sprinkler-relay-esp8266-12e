

// NOTE: guh -- https://forum.arduino.cc/t/pyserial-and-esptools-directory-error/671804/5

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

#ifndef STASSID
	#define	STASSID	"<<<YOUR WIFI SSID HERE>>>"
	#define	STAPSK	"<<<YOUR WIFI PASSWORD HERE>>>"
#endif
#define PODID		1
#define API_HOST	"<<<YOUR API HOST HERE>>>"
#define API_PORT	"<<<YOUR API HOST PORT HERE>>>"
#define zone_on		LOW
#define zone_off	HIGH

const bool	isDebug	= true;
const int	zone1	= D1;		// 		-- gpio: 5	--
const int	zone2	= D2;		// 		-- gpio: 4	--
const int	zone3	= D3;		// 		-- gpio: 0	-- boot failure if pulled LOW
const bool	z3		= true;
const int	zone4	= D4;		// 		-- gpio: 2 	-- pin is high on BOOT, boot failure if pulled LOW
const int	zone5	= false;	// D5	-- gpio: 14	-- "low-voltage" signal at BOOT
const int	zone6	= false;	// D6	-- gpio: 12	-- "low-voltage" signal at BOOT
const int	zone7	= false;	// D7	-- gpio: 13	-- pin is high at BOOT
const int	zone8	= false;	// D8	-- gpio: 15	-- boot failure if pulled HIGH
const bool	zoneOn	= zone_on;
const bool	zoneOff	= zone_off;

const char *	ssid		= STASSID;
const char *	pwd			= STAPSK;
const int		podId		= PODID;
const String	host		= API_HOST;
const int		port		= API_PORT;
const int		sleep		= 3600000;
const int		sleepOnTest	= 2500;
const int		sleepOnDoh	= 10000;

String		deviceMacId	= "";
WiFiClient	client;

ESP8266WebServer server(80);

void ReturnStatus() {
	bool zone1IsOn  = digitalRead(zone1) == zoneOn;
	Serial.printf( " -- Zone #1 is %s", zone1IsOn ?"TRUE": "FALSE" );
	bool zone2IsOn  = digitalRead(zone2) == zoneOn;
	Serial.printf( " -- Zone #2 is %s", zone2IsOn ?"TRUE": "FALSE" );
	bool zone3IsOn  = digitalRead(zone3) == zoneOn;
	Serial.printf( " -- Zone #3 is %s", zone3IsOn ?"TRUE": "FALSE" );
	bool zone4IsOn  = digitalRead(zone4) == zoneOn;
	Serial.printf( " -- Zone #4 is %s", zone4IsOn ?"TRUE": "FALSE" );
	bool zone5IsOn  = digitalRead(zone5) == zoneOn;
	Serial.printf( " -- Zone #5 is %s", zone5IsOn ?"TRUE": "FALSE" );
	bool zone6IsOn  = digitalRead(zone6) == zoneOn;
	Serial.printf( " -- Zone #6 is %s", zone6IsOn ?"TRUE": "FALSE" );
	bool zone7IsOn  = digitalRead(zone7) == zoneOn;
	Serial.printf( " -- Zone #7 is %s", zone7IsOn ?"TRUE": "FALSE" );
	bool zone8IsOn  = digitalRead(zone8) == zoneOn;
	Serial.printf( " -- Zone #8 is %s", zone8IsOn ?"TRUE": "FALSE" );
	char statusReturn[800];
	int truncCount = snprintf(
		statusReturn, 800,
		"{"
			"\tpod1: ["
				"\t\tzone1: %s,"
				"\t\tzone2: %s,"
				"\t\tzone3: %s,"
				"\t\tzone4: %s,"
				"\t\tzone5: %s,"
				"\t\tzone6: %s,"
				"\t\tzone7: N/A,"
				"\t\tzone8: N/A"
			"\t]"
		"}",
		zone1IsOn?"1": "0",
		zone2IsOn?"1": "0",
		zone3IsOn?"1": "0",
		zone4IsOn?"1": "0",
		zone5IsOn?"1": "0",
		zone6IsOn?"1": "0",
		zone7IsOn?"1": "-1",
		zone8IsOn?"1": "-1"
	);
	Serial.println("Truncation count: " + String(truncCount));
	server.send(200,"text/plain", statusReturn);
}

void bootTest() {
	if (zone1) {
		delay(sleepOnTest);
		Serial.println("zone1> ON(low)");
		digitalWrite(zone1, LOW);
		delay(sleepOnTest);
		Serial.println("zone1> OFF(high)");
		digitalWrite(zone1, HIGH);
	}
	if (zone2) {
		delay(sleepOnTest);
		Serial.println("zone2> ON(low)");
		digitalWrite(zone2, LOW);
		delay(sleepOnTest);
		Serial.println("zone2> OFF(high)");
		digitalWrite(zone2, HIGH);
	}
	if (z3) {									// boolean test doesn't work for zone3(a.k.a int "0", a.k.a. "false")
		delay(sleepOnTest);
		Serial.println("zone3> ON(low)");
		digitalWrite(zone3, LOW);
		delay(sleepOnTest);
		Serial.println("zone3> OFF(high)");
		digitalWrite(zone3, HIGH);
	}
	if (zone4) {
		delay(sleepOnTest);
		Serial.println("zone4> ON(low)");
		digitalWrite(zone4, LOW);
		delay(sleepOnTest);
		Serial.println("zone4> OFF(high)");
		digitalWrite(zone4, HIGH);
	}
	if (zone5) {
		delay(sleepOnTest);
		Serial.println("zone5> ON(low)");
		digitalWrite(zone5, LOW);
		delay(sleepOnTest);
		Serial.println("zone5> OFF(high)");
		digitalWrite(zone5, HIGH);
	}
	if (zone6) {
		delay(sleepOnTest);
		Serial.println("zone6> ON(low)");
		digitalWrite(zone6, LOW);
		delay(sleepOnTest);
		Serial.println("zone6> OFF(high)");
		digitalWrite(zone6, HIGH);
	}
	if (zone7) {
		delay(sleepOnTest);
		Serial.println("zone7> ON(low)");
		digitalWrite(zone7, LOW);
		delay(sleepOnTest);
		Serial.println("zone7> OFF(high)");
		digitalWrite(zone7, HIGH);
	}
	if (zone8) {
		delay(sleepOnTest);
		Serial.println("zone8> ON(low)");
		digitalWrite(zone8, LOW);
		delay(sleepOnTest);
		Serial.println("zone8> OFF(high)");
		digitalWrite(zone8, HIGH);
	}
}

void SetPin(byte pinNumber, byte newPinState) {
    digitalWrite(pinNumber, newPinState);
    Serial.print("\nmanually setting pin#");
    Serial.print(pinNumber);
    Serial.print(" to: ");
    Serial.println(newPinState);
    ReturnStatus();
}

void setup() {
	Serial.begin(115200);
	if (zone1) {
		digitalWrite(zone1, zoneOff);	// write HIGH before setting pinMode to avoid flapping the solenoid at boot
		pinMode(zone1, OUTPUT);
	}
	if (zone2) {
		digitalWrite(zone2, zoneOff);
		pinMode(zone2, OUTPUT);
	}
	if (z3) {							// boolean test doesn't work for zone3(a.k.a int "0", a.k.a. "false")
		digitalWrite(zone3, zoneOff);
		pinMode(zone3, OUTPUT);
	}
	if (zone4) {
		digitalWrite(zone4, zoneOff);
		pinMode(zone4, OUTPUT);
	}
	if (zone5) {
		digitalWrite(zone5, zoneOff);
		pinMode(zone5, OUTPUT);
	}
	if (zone6) {
		digitalWrite(zone6, zoneOff);
		pinMode(zone6, OUTPUT);
	}
	if (zone7) {
		digitalWrite(zone7, zoneOff);
		pinMode(zone7, OUTPUT);
	}
	if (zone8) {
		digitalWrite(zone8, zoneOff);
		pinMode(zone8, OUTPUT);
	}

	Serial.println();
	Serial.println("Configuring access point...");

	WiFi.mode(WIFI_STA);					// allow only WiFi connects
	deviceMacId	= WiFi.macAddress();
	WiFi.begin(ssid, pwd);
	while ( WiFi.status() != WL_CONNECTED ) {
		if (isDebug) Serial.print(".");
		delay(1000);
	}

	Serial.println( "WiFi connected!");
	Serial.print("IP address: \n");
	Serial.println(WiFi.localIP());
	Serial.print("Hardware MAC address: \n");
	Serial.println(WiFi.macAddress().c_str());

	bootTest();

	server.on("/stat"                   , []() { ReturnStatus();           });
	server.on("/pod/1/zone/1/action/1"  , []() { SetPin(zone1, zoneOn  ); });
	server.on("/pod/1/zone/1/action/0"  , []() { SetPin(zone1, zoneOff ); });
	server.on("/pod/1/zone/2/action/1"  , []() { SetPin(zone2, zoneOn  ); });
	server.on("/pod/1/zone/2/action/0"  , []() { SetPin(zone2, zoneOff ); });
	server.on("/pod/1/zone/3/action/1"  , []() { SetPin(zone3, zoneOn  ); });
	server.on("/pod/1/zone/3/action/0"  , []() { SetPin(zone3, zoneOff ); });
	server.on("/pod/1/zone/4/action/1"  , []() { SetPin(zone4, zoneOn  ); });
	server.on("/pod/1/zone/4/action/0"  , []() { SetPin(zone4, zoneOff ); });
	server.on("/pod/1/zone/5/action/1"  , []() { SetPin(zone5, zoneOn  ); });
	server.on("/pod/1/zone/5/action/0"  , []() { SetPin(zone5, zoneOff ); });
	server.on("/pod/1/zone/6/action/1"  , []() { SetPin(zone6, zoneOn  ); });
	server.on("/pod/1/zone/6/action/0"  , []() { SetPin(zone6, zoneOff ); });
	server.on("/pod/1/zone/7/action/1"  , []() { SetPin(zone7, zoneOn  ); });
	server.on("/pod/1/zone/7/action/0"  , []() { SetPin(zone7, zoneOff ); });
	server.on("/pod/1/zone/8/action/1"  , []() { SetPin(zone8, zoneOn  ); });
	server.on("/pod/1/zone/8/action/0"  , []() { SetPin(zone8, zoneOff ); });

	Serial.print("HTTP server starting..." );
	server.begin();
	Serial.print("done" );
}

void loop() { server.handleClient(); }
